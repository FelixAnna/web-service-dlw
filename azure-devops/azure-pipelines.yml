trigger:
  branches:
    include:
    - develop
  paths:
    include:
      - src/
      - azure-pipelines.yml
parameters:
  - name: environment
    displayName: Where to deploy?
    type: string
    default: dev
    values:
    - prod
    - dev
  - name: imageTag
    displayName: Docker image tag
    type: string
    default: latest
    
variables:
- group: ${{parameters.environment}}-variable-group
- name: env
  value: ${{parameters.environment}}
- name: imageTag
  value: ${{parameters.imageTag}}

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'
  
jobs:
- job: runTest
  displayName: Run Tests # Human-readable name for the job. 
  timeoutInMinutes: 5

  steps:
  - task: GoTool@0
    displayName: 'Use Go 1.19.3'
    inputs:
      version: 1.19.3

  - task: Go@0
    displayName: 'Run Test Cases - Common'
    inputs:
      command: test
      arguments: ./...
      workingDirectory: 'src/common'

  - task: Go@0
    displayName: 'Run Test Cases - Date API'
    inputs:
      command: test
      arguments: ./...
      workingDirectory: 'src/date-api'

  - task: Go@0
    displayName: 'Run Test Cases - Memo API'
    inputs:
      command: test
      arguments: ./...
      workingDirectory: 'src/memo-api'

  - task: Go@0
    displayName: 'Run Test Cases - Finance API'
    inputs:
      command: test
      arguments: ./...
      workingDirectory: 'src/finance-api'

  - task: Go@0
    displayName: 'Run Test Cases - User API'
    inputs:
      command: test
      arguments: ./...
      workingDirectory: 'src/user-api'
  #Multi-configuration and multi-agent job options are not exported to YAML. Configure these options using documentation guidance: https://docs.microsoft.com/vsts/pipelines/process/phases

- job: buildAndPush
  displayName: Build and Push Images # Human-readable name for the job. 
  dependsOn: runTest
  timeoutInMinutes: 10

  steps:
  - task: Docker@2
    displayName: 'Build Date Api image'
    inputs:
      containerRegistry: sharedacr
      repository: 'dlw-date-api'
      Dockerfile: 'src/date-api/Dockerfile'
      buildContext: 'src/date-api'
      tags: '$(imageTag)'

  - task: Docker@2
    displayName: 'Build Memo Api image'
    inputs:
      containerRegistry: sharedacr
      repository: 'dlw-memo-api'
      Dockerfile: 'src/memo-api/Dockerfile'
      buildContext: 'src/memo-api'
      tags: '$(imageTag)'

  - task: Docker@2
    displayName: 'Build Finance Api image'
    inputs:
      containerRegistry: sharedacr
      repository: 'dlw-finance-api'
      Dockerfile: 'src/finance-api/Dockerfile'
      buildContext: 'src/finance-api'
      tags: '$(imageTag)'

  - task: Docker@2
    displayName: 'Build User Api image'
    inputs:
      containerRegistry: sharedacr
      repository: 'dlw-user-api'
      Dockerfile: 'src/user-api/Dockerfile'
      buildContext: 'src/user-api'
      tags: '$(imageTag)'


- job: provisioningInfrastructure
  displayName: Apply infrastructure # Human-readable name for the job. 
  dependsOn: buildAndPush
  timeoutInMinutes: 10

  steps:
  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
    displayName: 'Use Terraform latest'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform initial'
    inputs:
      command: init
      workingDirectory: 'devops/aks_nginx/terraform/profiles/$(env)'
      backendType: azurerm
      backendServiceArm: 'azure resource manager'
      backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
      backendAzureRmResourceGroupName: 'configuration-rg'
      backendAzureRmStorageAccountName: configstoragefelix
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: 'dlw-$(env).nginx.tfstate'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform plan'
    inputs:
      command: plan
      workingDirectory: 'devops/aks_nginx/terraform/profiles/$(env)'
      environmentServiceName: 'azure resource manager'
      providerAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
      runAzLogin: true
      backendServiceArm: 'azure resource manager'
      backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
      backendAzureRmResourceGroupName: 'configuration-rg'
      backendAzureRmStorageAccountName: configstoragefelix
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: 'dlw-$(env).nginx.tfstate'
      publishPlanResults: 'dlw-$(env)-plan'
      providerServiceAws: 'aws connection'
      providerAwsRegion: '$(AWS_DEFAULT_REGION)'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform apply'
    inputs:
      command: apply
      workingDirectory: 'devops/aks_nginx/terraform/profiles/$(env)'
      environmentServiceName: 'azure resource manager'
      providerAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
      runAzLogin: true
      commandOptions: '-auto-approve'
      providerServiceAws: 'aws connection'
      providerAwsRegion: '$(AWS_DEFAULT_REGION)'

- job: deployServices
  displayName: Deploy All Services # Human-readable name for the job. 
  dependsOn: provisioningInfrastructure
  timeoutInMinutes: 10

  steps:
  - task: AzureCLI@2
    displayName: 'Replace Keys & Tags'
    inputs:
      azureSubscription: 'azure resource manager'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az login --service-principal --username="${ARM_CLIENT_ID}" --password="${ARM_CLIENT_SECRET}" --tenant=${ARM_TENANT_ID}
        sed -i "s/awsKeyIdPlaceHolder/$(echo -n $(AWS_ACCESS_KEY_ID) | base64)/" ./$(app)-chart/values_aks_$(env).yaml
        sed -i "s/awsSecretKeyPlaceHolder/$(echo -n $(AWS_SECRET_ACCESS_KEY) | base64)/" ./$(app)-chart/values_aks_$(env).yaml
        sed -i "s/imageVersion/$(imageTag)/" ./$(app)-chart/values_aks_$(env).yaml
      workingDirectory: 'devops'

  - task: AzureCLI@2
    displayName: 'Deploy Basic Charts'
    inputs:
      azureSubscription: 'azure resource manager'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        sh basic_services.sh $(env) $(app)
      useGlobalConfig: true
      workingDirectory: 'devops/aks_nginx/services'
      
  - task: AzureCLI@2
    displayName: 'Deploy Main Charts'
    inputs:
      azureSubscription: 'azure resource manager'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        sh main_services.sh $(env) $(app)
      useGlobalConfig: true
      workingDirectory: 'devops/aks_nginx/services'

