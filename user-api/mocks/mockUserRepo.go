// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/FelixAnna/web-service-dlw/user-api/users/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: user
func (_m *UserRepo) Add(user *entity.User) (*string, error) {
	ret := _m.Called(user)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*entity.User) *string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: userId
func (_m *UserRepo) Delete(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *UserRepo) GetAll() ([]entity.User, error) {
	ret := _m.Called()

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func() []entity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTables provides a mock function with given fields:
func (_m *UserRepo) GetAllTables() {
	_m.Called()
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepo) GetByEmail(email string) (*entity.User, error) {
	ret := _m.Called(email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: userId
func (_m *UserRepo) GetById(userId string) (*entity.User, error) {
	ret := _m.Called(userId)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAddress provides a mock function with given fields: userId, addresses
func (_m *UserRepo) UpdateAddress(userId string, addresses []entity.Address) error {
	ret := _m.Called(userId, addresses)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []entity.Address) error); ok {
		r0 = rf(userId, addresses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBirthday provides a mock function with given fields: userId, birthday
func (_m *UserRepo) UpdateBirthday(userId string, birthday string) error {
	ret := _m.Called(userId, birthday)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, birthday)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
