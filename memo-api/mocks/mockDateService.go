// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DateInterface is an autogenerated mock type for the DateInterface type
type DateInterface struct {
	mock.Mock
}

// GetDistance provides a mock function with given fields: start, end
func (_m *DateInterface) GetDistance(start int, end int) (int, int) {
	ret := _m.Called(start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetLunarDistance provides a mock function with given fields: start, end
func (_m *DateInterface) GetLunarDistance(start int, end int) (int, int) {
	ret := _m.Called(start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewDateInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDateInterface creates a new instance of DateInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDateInterface(t mockConstructorTestingTNewDateInterface) *DateInterface {
	mock := &DateInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
