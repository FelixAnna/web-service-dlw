// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/FelixAnna/web-service-dlw/finance-api/mathematics/problem/entity"
	mock "github.com/stretchr/testify/mock"
)

// QuestionRepo is an autogenerated mock type for the QuestionRepo type
type QuestionRepo struct {
	mock.Mock
}

type QuestionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *QuestionRepo) EXPECT() *QuestionRepo_Expecter {
	return &QuestionRepo_Expecter{mock: &_m.Mock}
}

// GetQuestion provides a mock function with given fields: id
func (_m *QuestionRepo) GetQuestion(id string) *entity.Questions {
	ret := _m.Called(id)

	var r0 *entity.Questions
	if rf, ok := ret.Get(0).(func(string) *entity.Questions); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Questions)
		}
	}

	return r0
}

// QuestionRepo_GetQuestion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuestion'
type QuestionRepo_GetQuestion_Call struct {
	*mock.Call
}

// GetQuestion is a helper method to define mock.On call
//  - id string
func (_e *QuestionRepo_Expecter) GetQuestion(id interface{}) *QuestionRepo_GetQuestion_Call {
	return &QuestionRepo_GetQuestion_Call{Call: _e.mock.On("GetQuestion", id)}
}

func (_c *QuestionRepo_GetQuestion_Call) Run(run func(id string)) *QuestionRepo_GetQuestion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QuestionRepo_GetQuestion_Call) Return(_a0 *entity.Questions) *QuestionRepo_GetQuestion_Call {
	_c.Call.Return(_a0)
	return _c
}

// SaveAnswers provides a mock function with given fields: answers
func (_m *QuestionRepo) SaveAnswers(answers *entity.Answers) error {
	ret := _m.Called(answers)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Answers) error); ok {
		r0 = rf(answers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuestionRepo_SaveAnswers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAnswers'
type QuestionRepo_SaveAnswers_Call struct {
	*mock.Call
}

// SaveAnswers is a helper method to define mock.On call
//  - answers *entity.Answers
func (_e *QuestionRepo_Expecter) SaveAnswers(answers interface{}) *QuestionRepo_SaveAnswers_Call {
	return &QuestionRepo_SaveAnswers_Call{Call: _e.mock.On("SaveAnswers", answers)}
}

func (_c *QuestionRepo_SaveAnswers_Call) Run(run func(answers *entity.Answers)) *QuestionRepo_SaveAnswers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Answers))
	})
	return _c
}

func (_c *QuestionRepo_SaveAnswers_Call) Return(_a0 error) *QuestionRepo_SaveAnswers_Call {
	_c.Call.Return(_a0)
	return _c
}

// SaveQuestions provides a mock function with given fields: questions
func (_m *QuestionRepo) SaveQuestions(questions *entity.Questions) error {
	ret := _m.Called(questions)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Questions) error); ok {
		r0 = rf(questions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuestionRepo_SaveQuestions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveQuestions'
type QuestionRepo_SaveQuestions_Call struct {
	*mock.Call
}

// SaveQuestions is a helper method to define mock.On call
//  - questions *entity.Questions
func (_e *QuestionRepo_Expecter) SaveQuestions(questions interface{}) *QuestionRepo_SaveQuestions_Call {
	return &QuestionRepo_SaveQuestions_Call{Call: _e.mock.On("SaveQuestions", questions)}
}

func (_c *QuestionRepo_SaveQuestions_Call) Run(run func(questions *entity.Questions)) *QuestionRepo_SaveQuestions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Questions))
	})
	return _c
}

func (_c *QuestionRepo_SaveQuestions_Call) Return(_a0 error) *QuestionRepo_SaveQuestions_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewQuestionRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuestionRepo creates a new instance of QuestionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuestionRepo(t mockConstructorTestingTNewQuestionRepo) *QuestionRepo {
	mock := &QuestionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
