// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/FelixAnna/web-service-dlw/memo-api/memo/entity"
	mock "github.com/stretchr/testify/mock"
)

// MemoRepo is an autogenerated mock type for the MemoRepo type
type MemoRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: memo
func (_m *MemoRepo) Add(memo *entity.Memo) (*string, error) {
	ret := _m.Called(memo)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*entity.Memo) *string); ok {
		r0 = rf(memo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Memo) error); ok {
		r1 = rf(memo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MemoRepo) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByDateRange provides a mock function with given fields: start, end, userId
func (_m *MemoRepo) GetByDateRange(start string, end string, userId string) ([]entity.Memo, error) {
	ret := _m.Called(start, end, userId)

	var r0 []entity.Memo
	if rf, ok := ret.Get(0).(func(string, string, string) []entity.Memo); ok {
		r0 = rf(start, end, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Memo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(start, end, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *MemoRepo) GetById(id string) (*entity.Memo, error) {
	ret := _m.Called(id)

	var r0 *entity.Memo
	if rf, ok := ret.Get(0).(func(string) *entity.Memo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Memo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserId provides a mock function with given fields: userId
func (_m *MemoRepo) GetByUserId(userId string) ([]entity.Memo, error) {
	ret := _m.Called(userId)

	var r0 []entity.Memo
	if rf, ok := ret.Get(0).(func(string) []entity.Memo); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Memo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: memo
func (_m *MemoRepo) Update(memo entity.Memo) error {
	ret := _m.Called(memo)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Memo) error); ok {
		r0 = rf(memo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMemoRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMemoRepo creates a new instance of MemoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMemoRepo(t mockConstructorTestingTNewMemoRepo) *MemoRepo {
	mock := &MemoRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
