# define default labels
{{- define "mytemplate.defaultLabel" }}
  labels:
    generator: helm
    date: {{ now | htmlDate }}
{{- end }}
---
# create secret
# use echo -n 'xxx' | base64   to convert value to base64
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-secret
  #namespace: {{ .Values.namespace }}
  {{- template "mytemplate.defaultLabel" }}
type: Opaque
data:
  aws-access-key-id: {{.Values.config.awsKeyId}}
  aws-secret-access-key: {{.Values.config.awsSecretKey}}
    
---
# create configMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-config
  {{- template "mytemplate.defaultLabel" }}
data:
  aws-region: {{.Values.config.region}}
    
---
# 2. create ResourceQuota for the namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: {{ .Release.Name }}-quota
  {{- template "mytemplate.defaultLabel" }}
spec:
  hard:
    requests.cpu: {{ .Values.quota.requests.cpu | quote}}
    requests.memory: {{ .Values.quota.requests.memory }}
    limits.cpu: {{ .Values.quota.limits.cpu | quote}}
    limits.memory: {{ .Values.quota.limits.memory }}

---
# 3.1 create roles for access pods
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-service-role
  {{- template "mytemplate.defaultLabel" }}
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "patch"] # You can also use ["*"]
  
---
# 3.2 create service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-sericeaccount
  {{- template "mytemplate.defaultLabel" }}

---
# 3.3 bind role to the default service account in the namespace
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-service-role-binding
  {{- template "mytemplate.defaultLabel" }}
subjects:
# You can specify more than one "subject"
- kind: ServiceAccount
  #name: system:serviceaccount:{{ .Release.Name }}-dev:default # "name" is case sensitive
  name: {{ .Release.Name }}-sericeaccount
  #apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: {{ .Release.Name }}-service-role # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
---
{{- range .Values.applications }}
# 4.1 autoscaling settings
## need enable metric before it can be take effect (using metric server or Prometheus)
apiVersion: autoscaling/v2  # kubectl v1.23 +
kind: HorizontalPodAutoscaler
metadata:
  name: {{.name}}-scaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ $.Release.Name }}-deployment-{{.name}}
  minReplicas: {{ $.Values.replica.min}}
  maxReplicas: {{ $.Values.replica.max}}
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 20
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 30
  ##below are custom metrics which need advanced advanced cluster monitoring setup
  #- type: Pods
  #  pods:
  #    metric:
  #      name: packets-per-second
  #    target:
  #      type: AverageValue
  #      averageValue: 10
  #- type: Object
  #  object:
  #    metric:
  #      name: requests-per-second
  #    describedObject:
  #      apiVersion: networking.k8s.io/v1
  #      kind: Ingress
  #      name: {{ $.Release.Name }}-ingress
  #    target:
  #      type: Value
  #      value: 10k
---
# 4.2 create deployment with pod spec for api service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-deployment-{{.name}}
  {{- template "mytemplate.defaultLabel" }}
spec:
  # replicas: {{ $.Values.replica.desired}} ## remove when autoscalar set
  selector:
    matchLabels:
      app: {{.name}}-api
  template:
    metadata:
      labels:
        app: {{.name}}-api
    spec:
      containers:
      - name: {{.name}}-api
        image: {{.image}}
        ports:
        - containerPort: {{.port}}
        imagePullPolicy: IfNotPresent
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-secret
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $.Release.Name }}-secret
              key: aws-secret-access-key
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: {{ $.Release.Name }}-config
              key: aws-region
        resources:
          requests:
            memory: {{.resources.requests.memory}}
            cpu: {{.resources.requests.cpu | quote}}
          limits:
            memory: {{.resources.limits.memory}}
            cpu: {{.resources.limits.cpu | quote}}
        volumeMounts:
          - mountPath: /var/run/secrets/tokens
            name: vault-token
      serviceAccountName: {{ $.Values.serviceAccount.name }}
      volumes:
      - name: vault-token
        projected:
          sources:
          - serviceAccountToken:
              path: vault-token
              expirationSeconds: 7200
              audience: vault        
         
---
# 5.1 create service
apiVersion: v1
kind: Service
metadata:
  name: {{ $.Release.Name }}-service-{{.name}}
  {{- template "mytemplate.defaultLabel" }}
spec:
  type: ClusterIP #default is ClusterIP which is only accessible inside kubernetes
  selector:
    app: {{.name}}-api
  ports:
    - name: http
      protocol: TCP
      port: {{.port}}
      targetPort: {{.port}} # can use port name reference or port number, container name is more flexible as we can change port number      

---
{{- end }}  

--- 
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $.Release.Name }}-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
  ingressClassName: {{.Values.ingress.ingressClassName}}
  rules:
  - http:
      paths:
      {{- range .Values.applications }}
      - path: /{{.name}}/(.*)
        pathType: Prefix
        backend:
          service:
            name: {{ $.Release.Name }}-service-{{.name}}
            port:
              number: {{ .port }}
      {{- end}}