# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none  # manually

parameters:
  - name: environment
    displayName: Which to DESTROY?
    type: string
    default: dev
    values:
    - prod
    - dev

variables:
- group: ${{parameters.environment}}-variable-group
- name: env
  value: ${{parameters.environment}}

pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'
  
jobs:
- job: unintallServices
  displayName: Uninstall All Services # Human-readable name for the job. 
  timeoutInMinutes: 15

  steps:
  
  # - task: AzureCLI@2
  #   displayName: 'Ensure Bypass CNAME Check For CustomDomain Deletion Registered'
  #   inputs:
  #     azureSubscription: 'azure resource manager'
  #     scriptType: bash
  #     scriptLocation: inlineScript
  #     inlineScript: |
  #       az feature register --namespace Microsoft.Network --name BypassCnameCheckForCustomDomainDeletion
  #       az provider register -n Microsoft.Network
  #     useGlobalConfig: true
  #     workingDirectory: 'devops/aks_nginx/services'
      
  - task: AWSCLI@1
    inputs:
      awsCredentials: 'aws connection'
      regionName: 'ap-southeast-1'
      awsCommand: 'route53'
      awsSubCommand: ' change-resource-record-sets'
      awsArguments: ' --hosted-zone-id Z022788838QVNX9DPP3IQ --change-batch ''{   "Comment": "Delete host zone record",   "Changes": [     {       "Action": "DELETE",       "ResourceRecordSet": {         "Name": "www.metadlw.com",         "Type": "CNAME", 		"TTL": 10, 		"ResourceRecords": [ 		  { 			"Value": "dlwendpoint.azureedge.net" 		  }]       }     }   ] }'''

  - task: AzureCLI@2
    displayName: 'Uninstall All Services'
    inputs:
      azureSubscription: 'azure resource manager'
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        sh uninstall.sh $(env) $(app)
      useGlobalConfig: true
      workingDirectory: 'devops/aks_nginx/services'

- job: destroyInfrastructure
  displayName: Destroy infrastructure # Human-readable name for the job. 
  dependsOn: unintallServices
  timeoutInMinutes: 30
  
  steps:
  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
    displayName: 'Use Terraform latest'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform initial'
    inputs:
      command: init
      workingDirectory: 'devops/aks_nginx/terraform/profiles/$(env)'
      backendType: azurerm
      backendServiceArm: 'azure resource manager'
      backendAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
      backendAzureRmResourceGroupName: 'configuration-rg'
      backendAzureRmStorageAccountName: configstoragefelix
      backendAzureRmContainerName: tfstate
      backendAzureRmKey: 'dlw-$(env).nginx.tfstate'
      commandOptions: '-reconfigure'

  - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
    displayName: 'terraform destroy'
    inputs:
      command: destroy
      workingDirectory: 'devops/aks_nginx/terraform/profiles/$(env)'
      environmentServiceName: 'azure resource manager'
      providerAzureRmSubscriptionId: '$(ARM_SUBSCRIPTION_ID)'
      runAzLogin: true
      commandOptions: '-auto-approve'
      providerServiceAws: 'aws connection'
      providerAwsRegion: '$(AWS_DEFAULT_REGION)'
