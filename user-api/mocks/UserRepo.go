// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/FelixAnna/web-service-dlw/user-api/users/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: user
func (_m *UserRepo) Add(user *entity.User) (*string, error) {
	ret := _m.Called(user)

	var r0 *string
	if rf, ok := ret.Get(0).(func(*entity.User) *string); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type UserRepo_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - user *entity.User
func (_e *UserRepo_Expecter) Add(user interface{}) *UserRepo_Add_Call {
	return &UserRepo_Add_Call{Call: _e.mock.On("Add", user)}
}

func (_c *UserRepo_Add_Call) Run(run func(user *entity.User)) *UserRepo_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *UserRepo_Add_Call) Return(_a0 *string, _a1 error) *UserRepo_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Delete provides a mock function with given fields: userId
func (_m *UserRepo) Delete(userId string) error {
	ret := _m.Called(userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - userId string
func (_e *UserRepo_Expecter) Delete(userId interface{}) *UserRepo_Delete_Call {
	return &UserRepo_Delete_Call{Call: _e.mock.On("Delete", userId)}
}

func (_c *UserRepo_Delete_Call) Run(run func(userId string)) *UserRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepo_Delete_Call) Return(_a0 error) *UserRepo_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *UserRepo) GetAll() ([]entity.User, error) {
	ret := _m.Called()

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func() []entity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserRepo_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *UserRepo_Expecter) GetAll() *UserRepo_GetAll_Call {
	return &UserRepo_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *UserRepo_GetAll_Call) Run(run func()) *UserRepo_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepo_GetAll_Call) Return(_a0 []entity.User, _a1 error) *UserRepo_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllTables provides a mock function with given fields:
func (_m *UserRepo) GetAllTables() {
	_m.Called()
}

// UserRepo_GetAllTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTables'
type UserRepo_GetAllTables_Call struct {
	*mock.Call
}

// GetAllTables is a helper method to define mock.On call
func (_e *UserRepo_Expecter) GetAllTables() *UserRepo_GetAllTables_Call {
	return &UserRepo_GetAllTables_Call{Call: _e.mock.On("GetAllTables")}
}

func (_c *UserRepo_GetAllTables_Call) Run(run func()) *UserRepo_GetAllTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UserRepo_GetAllTables_Call) Return() *UserRepo_GetAllTables_Call {
	_c.Call.Return()
	return _c
}

// GetByEmail provides a mock function with given fields: email
func (_m *UserRepo) GetByEmail(email string) (*entity.User, error) {
	ret := _m.Called(email)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserRepo_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//  - email string
func (_e *UserRepo_Expecter) GetByEmail(email interface{}) *UserRepo_GetByEmail_Call {
	return &UserRepo_GetByEmail_Call{Call: _e.mock.On("GetByEmail", email)}
}

func (_c *UserRepo_GetByEmail_Call) Run(run func(email string)) *UserRepo_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepo_GetByEmail_Call) Return(_a0 *entity.User, _a1 error) *UserRepo_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetById provides a mock function with given fields: userId
func (_m *UserRepo) GetById(userId string) (*entity.User, error) {
	ret := _m.Called(userId)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type UserRepo_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//  - userId string
func (_e *UserRepo_Expecter) GetById(userId interface{}) *UserRepo_GetById_Call {
	return &UserRepo_GetById_Call{Call: _e.mock.On("GetById", userId)}
}

func (_c *UserRepo_GetById_Call) Run(run func(userId string)) *UserRepo_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepo_GetById_Call) Return(_a0 *entity.User, _a1 error) *UserRepo_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateAddress provides a mock function with given fields: userId, addresses
func (_m *UserRepo) UpdateAddress(userId string, addresses []entity.Address) error {
	ret := _m.Called(userId, addresses)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []entity.Address) error); ok {
		r0 = rf(userId, addresses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UpdateAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAddress'
type UserRepo_UpdateAddress_Call struct {
	*mock.Call
}

// UpdateAddress is a helper method to define mock.On call
//  - userId string
//  - addresses []entity.Address
func (_e *UserRepo_Expecter) UpdateAddress(userId interface{}, addresses interface{}) *UserRepo_UpdateAddress_Call {
	return &UserRepo_UpdateAddress_Call{Call: _e.mock.On("UpdateAddress", userId, addresses)}
}

func (_c *UserRepo_UpdateAddress_Call) Run(run func(userId string, addresses []entity.Address)) *UserRepo_UpdateAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]entity.Address))
	})
	return _c
}

func (_c *UserRepo_UpdateAddress_Call) Return(_a0 error) *UserRepo_UpdateAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

// UpdateBirthday provides a mock function with given fields: userId, birthday
func (_m *UserRepo) UpdateBirthday(userId string, birthday string) error {
	ret := _m.Called(userId, birthday)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, birthday)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepo_UpdateBirthday_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBirthday'
type UserRepo_UpdateBirthday_Call struct {
	*mock.Call
}

// UpdateBirthday is a helper method to define mock.On call
//  - userId string
//  - birthday string
func (_e *UserRepo_Expecter) UpdateBirthday(userId interface{}, birthday interface{}) *UserRepo_UpdateBirthday_Call {
	return &UserRepo_UpdateBirthday_Call{Call: _e.mock.On("UpdateBirthday", userId, birthday)}
}

func (_c *UserRepo_UpdateBirthday_Call) Run(run func(userId string, birthday string)) *UserRepo_UpdateBirthday_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *UserRepo_UpdateBirthday_Call) Return(_a0 error) *UserRepo_UpdateBirthday_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepo(t mockConstructorTestingTNewUserRepo) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
