// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// DateInterface is an autogenerated mock type for the DateInterface type
type DateInterface struct {
	mock.Mock
}

type DateInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *DateInterface) EXPECT() *DateInterface_Expecter {
	return &DateInterface_Expecter{mock: &_m.Mock}
}

// GetDistance provides a mock function with given fields: start, end
func (_m *DateInterface) GetDistance(start int, end int) (int, int, int) {
	ret := _m.Called(start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int, int) int); ok {
		r2 = rf(start, end)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DateInterface_GetDistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDistance'
type DateInterface_GetDistance_Call struct {
	*mock.Call
}

// GetDistance is a helper method to define mock.On call
//  - start int
//  - end int
func (_e *DateInterface_Expecter) GetDistance(start interface{}, end interface{}) *DateInterface_GetDistance_Call {
	return &DateInterface_GetDistance_Call{Call: _e.mock.On("GetDistance", start, end)}
}

func (_c *DateInterface_GetDistance_Call) Run(run func(start int, end int)) *DateInterface_GetDistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *DateInterface_GetDistance_Call) Return(before int, after int, lunarYMD int) *DateInterface_GetDistance_Call {
	_c.Call.Return(before, after, lunarYMD)
	return _c
}

// GetLunarDistance provides a mock function with given fields: start, end
func (_m *DateInterface) GetLunarDistance(start int, end int) (int, int, int) {
	ret := _m.Called(start, end)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(start, end)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(start, end)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(int, int) int); ok {
		r2 = rf(start, end)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DateInterface_GetLunarDistance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLunarDistance'
type DateInterface_GetLunarDistance_Call struct {
	*mock.Call
}

// GetLunarDistance is a helper method to define mock.On call
//  - start int
//  - end int
func (_e *DateInterface_Expecter) GetLunarDistance(start interface{}, end interface{}) *DateInterface_GetLunarDistance_Call {
	return &DateInterface_GetLunarDistance_Call{Call: _e.mock.On("GetLunarDistance", start, end)}
}

func (_c *DateInterface_GetLunarDistance_Call) Run(run func(start int, end int)) *DateInterface_GetLunarDistance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *DateInterface_GetLunarDistance_Call) Return(before int, after int, lunarYMD int) *DateInterface_GetLunarDistance_Call {
	_c.Call.Return(before, after, lunarYMD)
	return _c
}

type mockConstructorTestingTNewDateInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewDateInterface creates a new instance of DateInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDateInterface(t mockConstructorTestingTNewDateInterface) *DateInterface {
	mock := &DateInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
